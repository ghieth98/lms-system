// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  name        String
  email       String       @unique
  password    String
  role        Role         @default(student)
  enrollments Enrollment[]
  progress    Progress[]

  @@map("users")
}

model Course {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  modules     Module[]
  quizes      Quiz[]
  enrollments Enrollment[]

  @@map("courses")
}

model Module {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title    String
  course   Course   @relation(fields: [courseId], references: [id])
  courseId Int
  lessons  Lesson[]

  @@map("modules")
}

model Lesson {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title    String
  content  String
  module   Module     @relation(fields: [moduleId], references: [id])
  moduleId Int
  progress Progress[]

  @@map("lessons")
}

model Quiz {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title     String
  course    Course     @relation(fields: [courseId], references: [id])
  courseId  Int
  questions Question[]

  @@map("quizes")
}

model Question {
  id      Int      @id @default(autoincrement())
  content String
  quiz    Quiz     @relation(fields: [quizId], references: [id])
  quizId  Int
  answers Answer[]

  @@map("questions")
}

model Answer {
  id         Int      @id @default(autoincrement())
  content    String
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  isCorrect  Boolean

  @@map("answers")
}

model Enrollment {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  enrolledAt DateTime @default(now())

  @@map("enorllments")
}

model Progress {
  updatedAt DateTime @updatedAt

  user     User   @relation(fields: [userId], references: [id])
  lesson   Lesson @relation(fields: [lessonId], references: [id])
  lessonId Int
  status   Status @default(not_started)
  userId   Int

  @@id([userId, lessonId])
  @@map("progress")
}

enum Role {
  student
  instructor
  admin
}

enum Status {
  not_started
  in_progress
  completed
}
